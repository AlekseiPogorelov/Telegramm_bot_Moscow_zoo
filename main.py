import telebot
from telebot import types
import random
import config


bot = telebot.TeleBot(config.TOKEN)

user_scores = {}
user_answers = {}


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item = types.KeyboardButton('–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')
    markup.add(item)

    bot.send_message(message.chat.id,
                     "üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞! üêæ\n\n"
                     "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ.\n"
                     "–í –∫–æ–Ω—Ü–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –æ–ø–µ–∫—É –Ω–∞–¥ —Å–≤–æ–∏–º —Ç–æ—Ç–µ–º–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –≤ –Ω–∞—à–µ–º –∑–æ–æ–ø–∞—Ä–∫–µ!",
                     reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')
def start_quiz(message):
    user_scores[message.chat.id] = {animal: 0 for animal in config.animals_data.keys()}
    user_answers[message.chat.id] = []
    ask_question(message, 0)


def ask_question(message, question_index):
    if question_index >= len(config.quiz_questions):
        show_result(message)
        return

    question = config.quiz_questions[question_index]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    buttons = [types.KeyboardButton(option) for option in question['options']]
    markup.add(*buttons)

    progress = f"–í–æ–ø—Ä–æ—Å {question_index + 1}/{len(config.quiz_questions)}"
    bot.send_message(message.chat.id, f"{progress}\n\n{question['question']}", reply_markup=markup)

    @bot.message_handler(func=lambda m: m.text in question['options'])
    def handle_answer(m):
        if m.chat.id not in user_scores:
            return

        selected_option = m.text
        option_index = question['options'].index(selected_option)
        user_answers[m.chat.id].append(selected_option)

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        for animal in config.animals_data.keys():
            if option_index == question['weights'].get(animal, 0):
                user_scores[m.chat.id][animal] += 1


        ask_question(m, question_index + 1)


def show_result(message):
    if message.chat.id not in user_scores:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞.")
        return

    scores = user_scores[message.chat.id]
    top_animals = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:3]
    totem_animal = top_animals[0][0]
    animal_info = config.animals_data[totem_animal]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    try:
        bot.send_photo(message.chat.id, animal_info['image'],
                       caption=f"–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {totem_animal}! üéâ")
    except:
        bot.send_message(message.chat.id, f"–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {totem_animal}! üéâ")


    desc_message = (
        f"üêæ {animal_info['description']}\n\n"
        f"–î—Ä—É–≥–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç:\n"
        f"2. {top_animals[1][0]} ({top_animals[1][1]} –±–∞–ª–ª–æ–≤)\n"
        f"3. {top_animals[2][0]} ({top_animals[2][1]} –±–∞–ª–ª–æ–≤)\n\n"
        f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–≤–æ–µ–º —Ç–æ—Ç–µ–º–Ω–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º?"
    )

    bot.send_message(message.chat.id, desc_message)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–í–∑—è—Ç—å –æ–ø–µ–∫—É", url=animal_info['sponsor_link']),
        types.InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑", callback_data='restart_quiz'),
        types.InlineKeyboardButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data=f"copy_result_{totem_animal}"),
        types.InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"contact_{totem_animal}")
    )

    bot.send_message(message.chat.id,
                     f"–í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –æ–ø–µ–∫—É –Ω–∞–¥ {totem_animal} –≤ –Ω–∞—à–µ–º –∑–æ–æ–ø–∞—Ä–∫–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ!",
                     reply_markup=markup)

    # –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_scores[message.chat.id]
    del user_answers[message.chat.id]


@bot.callback_query_handler(func=lambda call: call.data == 'restart_quiz')
def restart_quiz(call):
    start_quiz(call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('copy_result_'))
def handle_copy_result(call):
    animal = call.data.split('_')[-1]
    animal_info = config.animals_data[animal]

    result_text = (
        f"–ú–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {animal}! ü¶ÅüêØüêª\n\n"
        f"{animal_info['description']}\n\n"
        "–ü—Ä–æ–π–¥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π —Å–≤–æ–µ: @m99_zoo_bot"
    )


    bot.answer_callback_query(
        call.id,
        "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∫—É–¥–∞ —É–≥–æ–¥–Ω–æ.",
        show_alert=True
    )


    bot.send_message(call.message.chat.id, f"```\n{result_text}\n```", parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data.startswith('contact_'))
def handle_contact_request(call):
    totem_animal = call.data.split('_')[1]
    user = call.from_user


    user_data = {
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'animal': totem_animal,
        'status': 'waiting'
    }


    bot.send_message(
        call.message.chat.id,
        "üì® –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–æ–æ–ø–∞—Ä–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    contact_markup = types.InlineKeyboardMarkup()
    contact_markup.add(types.InlineKeyboardButton(
        "–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
        callback_data=f"reply_to_{user.id}"
    ))

    bot.send_message(
        config.ADMIN_CHAT_ID,
        f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"üë§ {user.first_name} {user.last_name} (@{user.username})\n"
        f"ü¶Å –¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {totem_animal}\n"
        f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {config.animals_data[totem_animal]['description']}",
        reply_markup=contact_markup
    )


    bot.register_next_step_handler(call.message, process_user_question, user_data)


def process_user_question(message, user_data):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data['question'] = message.text
    user_data['status'] = 'question_received'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    bot.send_message(
        config.ADMIN_CHAT_ID,
        f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['first_name']}:\n\n"
        f"{message.text}\n\n"
        f"–¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {user_data['animal']}",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton(
                "üì® –û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"reply_to_{user_data['user_id']}"
            )
        )
    )

    bot.send_message(
        message.chat.id,
        "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω! –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–æ–æ–ø–∞—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_to_'))
def handle_admin_reply(call):
    user_id = call.data.split('_')[-1]


    bot.send_message(
        config.ADMIN_CHAT_ID,
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):"
    )


    bot.register_next_step_handler(
        call.message,
        process_admin_reply,
        user_id
    )


def process_admin_reply(message, user_id):

    try:
        bot.send_message(
            user_id,
            f"üì© –û—Ç–≤–µ—Ç –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–æ–æ–ø–∞—Ä–∫–∞:\n\n{message.text}"
        )
        bot.send_message(
            config.ADMIN_CHAT_ID,
            "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!"
        )
    except Exception as e:
        bot.send_message(
            config.ADMIN_CHAT_ID,
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –û—à–∏–±–∫–∞: {str(e)}"
        )


bot.polling(none_stop=True)